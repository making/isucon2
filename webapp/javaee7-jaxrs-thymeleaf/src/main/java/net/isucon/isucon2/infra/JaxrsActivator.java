package net.isucon.isucon2.infra;

import java.util.Set;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * JAX-RS有効化
 *
 * @see http://backpaper0.github.io/2013/05/02/jaxrs.html
 */
@ApplicationPath("rest")
public class JaxrsActivator extends Application {

    @Override
    public Set<Class<?>> getClasses() {
        Set<Class<?>> resources = new java.util.HashSet<Class<?>>();
        // following code can be used to customize Jersey 2.0 JSON provider:
        try {
            Class jsonProvider = Class.forName("org.glassfish.jersey.jackson.JacksonFeature");
            // Class jsonProvider = Class.forName("org.glassfish.jersey.moxy.json.MoxyJsonFeature");
            // Class jsonProvider = Class.forName("org.glassfish.jersey.jettison.JettisonFeature");
            resources.add(jsonProvider);
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        addRestResourceClasses(resources);
        return resources;
    }

    /**
     * Do not modify addRestResourceClasses() method. It is automatically
     * re-generated by NetBeans REST support to populate given list with all
     * resources defined in the project.
     */
    private void addRestResourceClasses(Set<Class<?>> resources) {
        resources.add(net.isucon.isucon2.resource.AdminResource.class);
        resources.add(net.isucon.isucon2.resource.ArtistResource.class);
        resources.add(net.isucon.isucon2.resource.BuyResource.class);
        resources.add(net.isucon.isucon2.resource.ListResource.class);
        resources.add(net.isucon.isucon2.resource.TicketResource.class);
    }
}
